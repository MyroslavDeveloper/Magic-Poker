using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityEngine;

public static class GameStateReseter
{
    private static Dictionary<string, object> savedState = new();
    private static bool isLoaded = false;

    /// <summary>
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ü–µ–Ω—ã.
    /// </summary>
    public static void LoadAll()
    {
        if (isLoaded) return; // –ß—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–≤–∞–∂–¥—ã
        isLoaded = true;

        foreach (var field in GetStaticFields())
        {
            if (savedState.TryGetValue(field.Key, out var value))
            {
                field.Value.SetValue(null, value); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            }
        }

        Debug.Log("‚úÖ –í—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
    }

    /// <summary>
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º.
    /// </summary>
    public static void SaveAll()
    {
        foreach (var field in GetStaticFields())
        {
            savedState[field.Key] = field.Value.GetValue(null); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        }

        Debug.Log("üíæ –í—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º).
    /// </summary>
    public static void Reset()
    {
        savedState.Clear();
        Debug.Log("‚ôªÔ∏è –í—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤.
    /// </summary>
    private static Dictionary<string, FieldInfo> GetStaticFields()
    {
        return AppDomain.CurrentDomain.GetAssemblies()
            .SelectMany(a => a.GetTypes())
            .Where(t => t.IsClass && t.Namespace != null && t.Namespace.StartsWith("YourNamespace")) // –£–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω
            .SelectMany(t => t.GetFields(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic))
            .ToDictionary(f => $"{f.DeclaringType.FullName}.{f.Name}", f => f);
    }
}
